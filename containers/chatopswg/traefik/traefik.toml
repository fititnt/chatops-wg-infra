################################################################
# Global configuration
################################################################

# Enable debug mode
#
# Optional
# Default: false
#
debug = true

# Traefik logs file
# If not defined, logs to stdout
#
# Optional
#
# traefikLogsFile = "log/traefik.log"

# Log level
#
# Optional
# Default: "ERROR"
#
# logLevel = "ERROR"
logLevel = "DEBUG"

# Entrypoints to be used by frontends that do not specify any entrypoint.
# Each frontend can specify its own entrypoints.
#
# Optional
# Default: ["http"]
#
defaultEntryPoints = ["http", "https"]

# Entrypoints definition
#
# Optional
# Default:
[entryPoints]
    [entryPoints.http]
    address = ":80"
#        [entryPoints.http.redirect]
#            entryPoint = "https"
    [entryPoints.https]
    address = ":443"
        [entryPoints.https.tls]

# Enable access logs
# By default it will write to stdout and produce logs in the textual
# Common Log Format (CLF), extended with additional fields.
#
# Optional
#
# [accessLog]

# Sets the file path for the access log. If not specified, stdout will be used.
# Intermediate directories are created if necessary.
#
# Optional
# Default: os.Stdout
#
# filePath = "/path/to/log/log.txt"

# Format is either "json" or "common".
#
# Optional
# Default: "common"
#
# format = "common"

################################################################
# Web configuration backend
################################################################

# Enable web configuration backend
[web]

# Web administration port
#
# Required
#
address = ":8080"

# SSL certificate and key used.
#
# Optional
#
# certFile = "traefik.crt"
# keyFile = "traefik.key"

# Set REST API to read-only mode.
#
# Optional
# Default: false
#
readOnly = true

################################################################
# Docker configuration backend
################################################################

# Enable Docker configuration backend
[docker]

# Docker server endpoint. Can be a tcp or a unix socket endpoint.
#
# Required
#
endpoint = "unix:///var/run/docker.sock"

# Default domain used.
# Can be overridden by setting the "traefik.domain" label on a container.
#
# Required
#
domain = "alpha.chatopswg.xyz"

# Enable watch docker changes
#
# Optional
#
watch = true

# Override default configuration template. For advanced users :)
#
# Optional
#
# filename = "docker.tmpl"

# Expose containers by default in traefik
# If set to false, containers that don't have `traefik.enable=true` will be ignored
#
# Optional
# Default: true
#
exposedbydefault = true

# Use the IP address from the binded port instead of the inner network one. For specific use-case :)
#
# Optional
# Default: false
#
usebindportip = true

# Use Swarm Mode services as data provider
#
# Optional
# Default: false
#
swarmmode = false

# Enable docker TLS connection
#
# Optional
#
#[docker.tls]
#ca = "/etc/ssl/ca.crt"
#cert = "/etc/ssl/docker.crt"
#key = "/etc/ssl/docker.key"
#insecureskipverify = true


## See https://github.com/containous/traefik/pull/2701
[acme]
email = "postmaster@chatopswg.xyz"
storage = "/etc/traefik/acme/acme.json"
entryPoint = "https"
onHostRule = true
onDemand = false

dnsProvider = "cloudflare" # https://docs.traefik.io/configuration/acme/

#[acme.httpChallenge]
#    entryPoint = "http"

[[acme.domains]]
  main = "chatopswg.xyz"
  sans = ["www.chatopswg.xyz", "alpha.chatopswg.xyz", "rocketchat.chatopswg.xyz", "traefik.chatopswg.xyz", "ia001.chatopswg.xyz", "ia002.chatopswg.xyz", "ia003.chatopswg.xyz", "ia004.chatopswg.xyz", "ia005.chatopswg.xyz", "ia006.chatopswg.xyz", "ia007.chatopswg.xyz", "ia008.chatopswg.xyz", "ia009.chatopswg.xyz"]